
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace books
{
    class N
    {
        class publication												//main class publication
        {
            string title;
            double price;

            public string Title
            {
                get { return title; }
                set { title = value; }
            }
            public double Price
            {
                get { return price; }
                set { price = this.price; }
            }

        }
        class book : publication											//derived class book
        {
            int pg_count;
            string a_name;

            public int Count
            {
                get { return pg_count; }
                set { pg_count = this.pg_count; }
            }
            public string Title
            {
                get { return a_name; }
                set { a_name = value; }
            }
        }

        class video : publication											//derived class video
        {
            float play_time;

            public float Title
            {
                get { return play_time; }
                set { play_time = this.play_time; }
            }
        }

        public static void Main()											//testing program
        {
            Console.WriteLine("Welcome to publication portal");
            publication p = new publication();
            p.Title = Console.ReadLine();
            Console.WriteLine(p.Title);
        }
    }
}




---------------------------------------------------------------------------------------------------




using System;

class person                                        // class person with 4 attributes
{
    string _firstname;
    string _lastname;
    string _email;
    DateTime _dateofbirth;

    public string firstname                         //property to access f_name
    {
        get { return _firstname; }
        set { _firstname = value; }
    }

    public string lastname                          //property to access l_name
    {
        get { return _lastname; }
        set { _lastname = value; }
    }

    public string email                             //property to access email
    {
        get { return _email; }
        set
        {
            
            string[] items = value.Split('@');                                              //validity of email
            if (items.Length != 2) 
            {
                throw new ArgumentException("Invalid email address");
            }
            _email = value;
        }
    }

    public DateTime dateofbirth                                                            //property to access dob
    {
        get { return _dateofbirth; }
        set
        {
            if (value > DateTime.Today) 
            {
                throw new ArgumentException("Date of birth can't be in the future");            //Validity of dob check
            }
            _dateofbirth = value; 
        }
    }

    public person(string first, string last, string email, DateTime dateofbirth)               //Constructor
    {
        this.firstname = first;
        this.lastname = last;

        try                                                                                    //exception handling
        {
            this.email = email;
        }
        catch (Exception ex)
        {
            Console.WriteLine();
            Console.WriteLine(ex.Message);
        }

        try
        {
            this.dateofbirth = dateofbirth;
        }
        catch (ArgumentException ex)
        {
            Console.WriteLine();
            Console.WriteLine(ex.Message);
        }
    }

    public bool Adult                                                                   //property to only get data from adult
    {
        get
        {
            DateTime eighteen = _dateofbirth.AddYears(18); 
            if (DateTime.Today >= eighteen) return true; 
            return false; 
        }
    }

    public bool birthday 
    {
        get
        {
            DateTime today = DateTime.Today;
            if (today.Month == _dateofbirth.Month && today.Day == _dateofbirth.Day)
            {
                return true;
            }
            return false;
        }
    }
}


class TestDriver                                                                                //testing the program 
{
    static void Main()
    {
        Console.WriteLine("Enter details for a person :");
        Console.Write(" First name : ");
        string first = Console.ReadLine();
        Console.Write(" Last name : ");
        string last = Console.ReadLine();
        Console.Write(" Email address : ");
        string email = Console.ReadLine();
        Console.Write(" Date of birth as yyyy/mm/dd ");
        string dob = Console.ReadLine();
        DateTime dateofbirth = DateTime.Parse(dob);
        person p = new person(first, last, email, dateofbirth);
        Console.WriteLine();
        Console.WriteLine("The name is : {0} {1}", p.firstname, p.lastname);
        Console.WriteLine("Screen Name is :" +p.firstname+p.lastname[0]);	
        Console.WriteLine("Email address is: {0}", p.email);
        Console.WriteLine("Date of birth is: {0}", p.dateofbirth.ToShortDateString());
        Console.WriteLine("Adult : {0}", p.Adult);
        Console.WriteLine("Birthday today : {0}", p.birthday);
        				                                                                                       //SunSign and Chinese sign left
      
    }
}

